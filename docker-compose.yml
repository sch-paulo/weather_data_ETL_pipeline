services:
  db:
    container_name: postgres 
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_HOST_AUTH_METHOD=md5
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    ports:
      - "5433:5432"
    networks:
      - weather_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    
  etl-pipeline:
    build: .
    image: etl-pipeline:latest
    env_file:
      - .env
    environment:
      - API_KEY=${API_KEY}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
    ports:
      - "8001:8001"
    networks:
      - weather_network
    depends_on:
      db:
        condition: service_healthy
    command: ["python", "src/main.py"]

  app:
    build: .
    ports:
      - "8501:8501"
    env_file:
      - .env
    environment:
      - API_KEY=${API_KEY}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_PORT=5432
    networks:
      - weather_network
    depends_on:
      db:
        condition: service_healthy
    command: ["streamlit", "run", "src/app.py"]

  airflow-postgres:
    image: postgres:13
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    networks:
      - weather_network
    healthcheck:  # Ensure Postgres is ready
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 5s
      timeout: 5s
      retries: 5

  airflow-init:
    image: apache/airflow:2.8.1
    depends_on:
      airflow-postgres:
        condition: service_healthy  # Wait for Postgres to be ready
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
    command: 
      - bash
      - -c
      - |
        airflow db migrate
        airflow users create \
          --username admin \
          --password admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com
    networks:
      - weather_network
    healthcheck:  # Add healthcheck
      test: ["CMD-SHELL", "airflow db check"]
      interval: 10s
      timeout: 10s
      retries: 5

  airflow-webserver:
    image: apache/airflow:2.8.1
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags  # Mount local DAGs directory
      - /var/run/docker.sock:/var/run/docker.sock  # Allow Airflow to run Docker commands
    command: airflow webserver --port 8080
    networks:
      - weather_network

  airflow-scheduler:
    image: apache/airflow:2.8.1
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
    volumes:
      - ./dags:/opt/airflow/dags
      - /var/run/docker.sock:/var/run/docker.sock
    command: airflow scheduler
    networks:
      - weather_network

volumes:
  postgres_data:

networks:
  weather_network:
    driver: bridge